#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2022 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:    sensirion-driver-generator 0.17.0
# Product:      sfc6xxx
# Version:      1.0
#
"""
The class Sfc6xxxDeviceBase implements the low level interface of the sensor.
The class Sfc6xxxDevice extends the Sfc6xxxDeviceBase. It provides additional functions to ease the use of the
sensor.
"""

import time
from sensirion_driver_adapters.transfer import execute_transfer
from sensirion_driver_support_types.mixin_access import MixinAccess
from sensirion_uart_sfc6xxx.commands import (GetModbusBaudrate, GetModbusParityAndStopbit, GetModbusSlaveAddress,
                                             SetModbusBaudrate, SetModbusParityAndStopbit, SetModbusSlaveAddress,
                                             DeviceReset, GetI2cAddress, GetModbusRTU, GetSHDLCProtocol,
                                             GetArticleCode, GetBaudrate, GetCalibration, GetCalibrationFullscale,
                                             GetCalibrationGasId, GetCalibrationGasUnit, GetCalibrationValidity,
                                             GetCurrentFullscale, GetCurrentGasId, GetCurrentGasUnit, GetFirmwareBuild,
                                             GetNumberOfCalibrations, GetProductName, GetProductType, GetSerialNumber,
                                             GetSetpoint, GetSlaveAddress, GetUserControllerGain, GetUserInitStep,
                                             GetVersion, MeasureRawFlow, MeasureRawThermalConductivityWithClosedValve,
                                             MeasureTemperature, ReadMeasuredValue, SetI2cAddress, SetModbusRTU,
                                             SetSHDLCProtocol, SetBaudrate, SetCalibration, SetCalibrationVolatile,
                                             SetSetpoint, SetSetpointAndReadMeasuredValue, SetSlaveAddress,
                                             SetUserControllerGain, SetUserInitStep)


class Sfc6xxxDeviceBase:
    """Low level API implementation of SFC6XXX"""

    def __init__(self, channel):
        self._channel = channel

    @property
    def channel(self):
        return self._channel

    def set_setpoint(self, scaling, setpoint):
        """


        :param scaling:
            0x01: Setpoint represents a physical value. The range depends on the
            flow unit and calibration range.
        :param setpoint:
            The new setpoint with the specified scaling.
        """
        transfer = SetSetpoint(scaling, setpoint)
        return execute_transfer(self._channel, transfer)

    def get_setpoint(self):
        """


        :return setpoint:
            The current setpoint with the specified scaling.
        """
        transfer = GetSetpoint()
        return execute_transfer(self._channel, transfer)[0]

    def read_measured_value(self, scaling):
        """
        The command returns the latest measured flow value. The value can be read as
        physical or normalized value.

        :param scaling:
            - 0x01: Flow represents a physical value. The range depends         on the flow
            unit and calibration range.

        :return measured_value:
            The latest measured flow with the specified scaling.
        """
        transfer = ReadMeasuredValue(scaling)
        return execute_transfer(self._channel, transfer)[0]

    def set_setpoint_and_read_measured_value(self, scaling, setpoint):
        """
        This command is a combination of the two commands \"Set Setpoint (0x00)\" and
        \"Read Measured Value (0x08)\". It is intended for process data exchange
        (setpoint and flow) and safes a lot of protocol overhead compared to separate
        command usage.

        :param scaling:
            0x01: Setpoint/flow represents physical values. The range         depends on
            the flow unit and calibration range.
        :param setpoint:
            The new setpoint.

        :return measured_value:
            The latest measured flow.
        """
        transfer = SetSetpointAndReadMeasuredValue(scaling, setpoint)
        return execute_transfer(self._channel, transfer)[0]

    def set_user_controller_gain(self, gain):
        """


        :param gain:
            The user controller gain to set.
        """
        transfer = SetUserControllerGain(gain)
        return execute_transfer(self._channel, transfer)

    def get_user_controller_gain(self):
        """


        :return gain:
            The current user controller gain.
        """
        transfer = GetUserControllerGain()
        return execute_transfer(self._channel, transfer)[0]

    def set_user_init_step(self, init_step):
        """


        :param init_step:
            the user init step to set.
        """
        transfer = SetUserInitStep(init_step)
        return execute_transfer(self._channel, transfer)

    def get_user_init_step(self):
        """


        :return init_step:
            The current user init step.
        """
        transfer = GetUserInitStep()
        return execute_transfer(self._channel, transfer)[0]

    def measure_raw_flow(self):
        """
        Return the measured raw flow ticks from the sensor.

        :return flow:
            Measured raw flow in ticks.
        """
        transfer = MeasureRawFlow()
        return execute_transfer(self._channel, transfer)[0]

    def measure_raw_thermal_conductivity_with_closed_valve(self):
        """
        Perform a thermal conductivity measurement and return the measured raw tick
        value. The valve is automatically closed during the measurement.

        :return thermal_conductivity:
            Measured raw thermal conductivity in ticks.
        """
        transfer = MeasureRawThermalConductivityWithClosedValve()
        return execute_transfer(self._channel, transfer)[0]

    def measure_temperature(self):
        """
        Return the temperature of flow sensor.

        :return temperature:
            Measured temperature [Â°C].
        """
        transfer = MeasureTemperature()
        return execute_transfer(self._channel, transfer)[0]

    def get_number_of_calibrations(self):
        """
        Get the number of calibrations, i.e. how many calibration the device memory is
        able to hold.

        :return number_of_calibrations:
            Number of calibrations.
        """
        transfer = GetNumberOfCalibrations()
        return execute_transfer(self._channel, transfer)[0]

    def get_calibration_validity(self, index):
        """
        Check whether there exists a valid calibration at a specific index or not.

        :param index:
            The index to check whether there is a valid calibration or not.

        :return validity:
            Whether there exists a valid calibration at the specified index or not.
        """
        transfer = GetCalibrationValidity(index)
        return execute_transfer(self._channel, transfer)[0]

    def get_calibration_gas_id(self, index):
        """
        Get the gas ID of a specific calibration index.

        :param index:
            The calibration index to read the requested information from.

        :return gas_id:
            The read gas ID.
        """
        transfer = GetCalibrationGasId(index)
        return execute_transfer(self._channel, transfer)[0]

    def get_calibration_gas_unit(self, index):
        """
        Get the gas unit of a specific calibration index.

        :param index:
            The calibration index to read the requested information from.

        :return prefix:
            Medium unit prefix, see appendix for encoding.
        :return unit:
            Medium unit, see appendix for encoding.
        :return timebase:
            Timebase, see appendix for encoding.
        """
        transfer = GetCalibrationGasUnit(index)
        return execute_transfer(self._channel, transfer)

    def get_calibration_fullscale(self, index):
        """
        Get the fullscale flow of a specific calibration index.

        :param index:
            The calibration index to read the requested information from.

        :return fullscale:
            The read fullscale flow in the unit of the corresponding calibration.
        """
        transfer = GetCalibrationFullscale(index)
        return execute_transfer(self._channel, transfer)[0]

    def get_current_gas_id(self):
        """
        Get the gas ID of the currently active calibration.

        :return gas_id:
            The read gas ID.
        """
        transfer = GetCurrentGasId()
        return execute_transfer(self._channel, transfer)[0]

    def get_current_gas_unit(self):
        """
        Get the gas unit of the currently active calibration.

        :return prefix:
            Medium unit prefix, see appendix for encoding.
        :return unit:
            Medium unit, see appendix for encoding.
        :return timebase:
            Timebase, see appendix for encoding.
        """
        transfer = GetCurrentGasUnit()
        return execute_transfer(self._channel, transfer)

    def get_current_fullscale(self):
        """
        Get the fullscale flow of the currently active calibration.

        :return fullscale:
            The read fullscale flow in the unit of the corresponding calibration.
        """
        transfer = GetCurrentFullscale()
        return execute_transfer(self._channel, transfer)[0]

    def set_calibration(self, calibration_number):
        """


        :param calibration_number:
            The calibration number to activate.
        """
        transfer = SetCalibration(calibration_number)
        return execute_transfer(self._channel, transfer)

    def get_calibration(self):
        """


        :return calibration_number:
            The current activated calibration number.
        """
        transfer = GetCalibration()
        return execute_transfer(self._channel, transfer)[0]

    def set_calibration_volatile(self, calibration_number):
        """
        This command stops the controller, changes the used calibration of the flow
        controller and starts the controller. The selected calibration is not stored to
        a non volatile memory.

        :param calibration_number:
            The calibration number to activate.
        """
        transfer = SetCalibrationVolatile(calibration_number)
        return execute_transfer(self._channel, transfer)

    def set_i2c_address(self, I2c_Address):
        """
        Configures the I2C address of SFC6xxx

        :param i2c_address:
            The I2C address of SFC6xxx.
        """
        transfer = SetI2cAddress(I2c_Address)
        return execute_transfer(self._channel, transfer)

    def get_i2c_address(self):
        """
        Get the I2C address of SFC6xxx.

        :return i2c_address:
            The I2C address of SFC6xxx.
        """
        transfer = GetI2cAddress()
        return execute_transfer(self._channel, transfer)[0]

    def set_shdlc_protocol(self, state):
        """


        :param state:
            Set the state of SHDLC protocol
        """
        transfer = SetSHDLCProtocol(state)
        return execute_transfer(self._channel, transfer)

    def get_shdlc_protocol(self):
        """


        :return state:
            The current state of SHDLC protocol
        """
        transfer = GetSHDLCProtocol()
        return execute_transfer(self._channel, transfer)[0]

    def set_modbus_rtu(self, state):
        """


        :param state:
            Set the state of Modbus RTU
        """
        transfer = SetModbusRTU(state)
        return execute_transfer(self._channel, transfer)

    def get_modbus_rtu(self):
        """


        :return state:
            The current state of Modbus RTU
        """
        transfer = GetModbusRTU()
        return execute_transfer(self._channel, transfer)[0]

    def set_modbus_parity_and_stopbit(self, parity_and_stopbit):
        """
        Sets the Modbus Parity and Stopbit

        :param parity_and_stopbit:

        """
        transfer = SetModbusParityAndStopbit(parity_and_stopbit)
        return execute_transfer(self._channel, transfer)

    def set_modbus_baudrate(self, Baudrate):
        """
        Sets the Modbus baudrate

        :param baudrate:
            The new Modbus baudrate in bit/s. Allowed values are 9600, 19200, 38400, 57600
            and 115200 (default)
        """
        transfer = SetModbusBaudrate(Baudrate)
        return execute_transfer(self._channel, transfer)

    def set_modbus_slave_address(self, slave_address):
        """
        Sets the Modbus slave address

        :param slave_address:
            Modbus slave address (1..247).
        """
        transfer = SetModbusSlaveAddress(slave_address)
        return execute_transfer(self._channel, transfer)

    def get_modbus_parity_and_stopbit(self):
        """
        Gets the Modbus Parity and Stopbit

        :return parity_and_stopbit:

        """
        transfer = GetModbusParityAndStopbit()
        return execute_transfer(self._channel, transfer)[0]

    def get_modbus_baudrate(self):
        """
        Gets the Modbus baudrate

        :return baudrate:
            The Baudrate for Modbus [bit/s].
        """
        transfer = GetModbusBaudrate()
        return execute_transfer(self._channel, transfer)[0]

    def get_modbus_slave_address(self):
        """
        Gets the Modbus slave address

        :return slave_address:
            Modbus slave address (1..247).
        """
        transfer = GetModbusSlaveAddress()
        return execute_transfer(self._channel, transfer)[0]

    def set_slave_address(self, slave_address):
        """
        This command change the device address.

        :param slave_address:
            The new slave address to set.
        """
        transfer = SetSlaveAddress(slave_address)
        return execute_transfer(self._channel, transfer)

    def get_slave_address(self):
        """
        This command change the device address.

        :return slave_address:
            The current slave address of the device.
        """
        transfer = GetSlaveAddress()
        return execute_transfer(self._channel, transfer)[0]

    def set_baudrate(self, baudrate):
        """


        :param baudrate:
            The new baudrate in bit/s. Allowed values are 9600, 19200, 38400, 57600 and
            115200 (default)
        """
        transfer = SetBaudrate(baudrate)
        return execute_transfer(self._channel, transfer)

    def get_baudrate(self):
        """


        :return baudrate:
            Current baudrate in bit/s.
        """
        transfer = GetBaudrate()
        return execute_transfer(self._channel, transfer)[0]

    def get_firmware_build(self):
        """
        Gets the identification of the firmware build on the device. This command
        returns more detailed information than the \"Get Version\" command, which helps
        to identify non-released firmware builds.

        :return firmware_build:
            String describing the firmware build.
        """
        transfer = GetFirmwareBuild()
        return execute_transfer(self._channel, transfer)[0]

    def get_product_type(self):
        """
        Gets the product type from the device.

        :return product_type:
            String containing the product type.
        """
        transfer = GetProductType()
        return execute_transfer(self._channel, transfer)[0]

    def get_product_name(self):
        """


        :return product_name:
            String containing the product name.
        """
        transfer = GetProductName()
        return execute_transfer(self._channel, transfer)[0]

    def get_article_code(self):
        """


        :return article_code:
            The article code as an ASCII string.
        """
        transfer = GetArticleCode()
        return execute_transfer(self._channel, transfer)[0]

    def get_serial_number(self):
        """


        :return serial_number:
            String containing the serial number of the SFC6xxx sensor.
        """
        transfer = GetSerialNumber()
        return execute_transfer(self._channel, transfer)[0]

    def get_version(self):
        """
        Gets the version information for the hardware, firmware and SHDLC protocol.

        :return firmware_major:
            Firmware major version number.
        :return firmware_minor:
            Firmware minor version number.
        :return firmware_debug:
            Firmware debug state. If the debug state is set, the firmware is in development.
        :return hardware_major:
            Hardware major version number.
        :return hardware_minor:
            Hardware minor version number.
        :return protocol_major:
            Protocol major version number.
        :return protocol_minor:
            Protocol minor version number.
        """
        transfer = GetVersion()
        return execute_transfer(self._channel, transfer)

    def device_reset(self):
        """Executes a reset on the device. This has the same effect as a power cycle."""
        transfer = DeviceReset()
        return execute_transfer(self._channel, transfer)


class Sfc6xxxDevice(Sfc6xxxDeviceBase):
    """Driver class implementation of SFC6XXX"""

    sfc6xxx = MixinAccess()

    def __init__(self, channel):
        super().__init__(channel)

    def close_valve(self):
        """Switch device off (close the valve by setting setpoint to 0)"""
        return self.set_setpoint(1, 0)

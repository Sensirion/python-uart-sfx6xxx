#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2022 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:    sensirion-driver-generator 0.17.0
# Product:      sfc6xxx
# Version:      1.0
#
"""
The transfer classes specify the data that is transferred between host and sensor. The generated transfer classes
are used by the driver class and not intended for direct use.
"""

from enum import Enum
from sensirion_driver_adapters.transfer import Transfer
from sensirion_driver_adapters.rx_tx_data import TxData, RxData
from sensirion_driver_support_types.bitfield import BitField, BitfieldContainer


class SetSetpoint(Transfer):
    """"""

    CMD_ID = 0x0

    def __init__(self, scaling, setpoint):
        self._scaling = scaling
        self._setpoint = setpoint

    def pack(self):
        return self.tx_data.pack([self._scaling, self._setpoint])

    tx = TxData(CMD_ID, '>BBf')


class GetSetpoint(Transfer):
    """"""

    CMD_ID = 0x0

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>B')
    rx = RxData('>f')


class ReadMeasuredValue(Transfer):
    """
    The command returns the latest measured flow value. The value can be read as
    physical or normalized value.
    """

    CMD_ID = 0x8

    def __init__(self, scaling):
        self._scaling = scaling

    def pack(self):
        return self.tx_data.pack([self._scaling])

    tx = TxData(CMD_ID, '>BB', device_busy_delay=0.01, slave_address=None, ignore_ack=False)
    rx = RxData('>f')


class SetSetpointAndReadMeasuredValue(Transfer):
    """
    This command is a combination of the two commands \"Set Setpoint (0x00)\" and
    \"Read Measured Value (0x08)\". It is intended for process data exchange
    (setpoint and flow) and safes a lot of protocol overhead compared to separate
    command usage.
    """

    CMD_ID = 0x3

    def __init__(self, scaling, setpoint):
        self._scaling = scaling
        self._setpoint = setpoint

    def pack(self):
        return self.tx_data.pack([self._scaling, self._setpoint])

    tx = TxData(CMD_ID, '>BBf', device_busy_delay=0.01, slave_address=None, ignore_ack=False)
    rx = RxData('>f')


class SetUserControllerGain(Transfer):
    """"""

    CMD_ID = 0x22

    def __init__(self, gain):
        self._gain = gain

    def pack(self):
        return self.tx_data.pack([0x0, self._gain])

    tx = TxData(CMD_ID, '>BBf')


class GetUserControllerGain(Transfer):
    """"""

    CMD_ID = 0x22

    def pack(self):
        return self.tx_data.pack([0x0])

    tx = TxData(CMD_ID, '>BB')
    rx = RxData('>f')


class SetUserInitStep(Transfer):
    """"""

    CMD_ID = 0x22

    def __init__(self, init_step):
        self._init_step = init_step

    def pack(self):
        return self.tx_data.pack([0x3, self._init_step])

    tx = TxData(CMD_ID, '>BBf')


class GetUserInitStep(Transfer):
    """"""

    CMD_ID = 0x22

    def pack(self):
        return self.tx_data.pack([0x3])

    tx = TxData(CMD_ID, '>BB')
    rx = RxData('>f')


class MeasureRawFlow(Transfer):
    """Return the measured raw flow ticks from the sensor."""

    CMD_ID = 0x30

    def pack(self):
        return self.tx_data.pack([0x0])

    tx = TxData(CMD_ID, '>BB', device_busy_delay=0.01, slave_address=None, ignore_ack=False)
    rx = RxData('>H')


class MeasureRawThermalConductivityWithClosedValve(Transfer):
    """
    Perform a thermal conductivity measurement and return the measured raw tick
    value. The valve is automatically closed during the measurement.
    """

    CMD_ID = 0x30

    def pack(self):
        return self.tx_data.pack([0x2])

    tx = TxData(CMD_ID, '>BB', device_busy_delay=0.6, slave_address=None, ignore_ack=False)
    rx = RxData('>H')


class MeasureTemperature(Transfer):
    """Return the temperature of flow sensor."""

    CMD_ID = 0x30

    def pack(self):
        return self.tx_data.pack([0x10])

    tx = TxData(CMD_ID, '>BB', device_busy_delay=0.01, slave_address=None, ignore_ack=False)
    rx = RxData('>f')


class GetNumberOfCalibrations(Transfer):
    """
    Get the number of calibrations, i.e. how many calibration the device memory is
    able to hold.
    """

    CMD_ID = 0x40

    def pack(self):
        return self.tx_data.pack([0x0])

    tx = TxData(CMD_ID, '>BB', device_busy_delay=0.01, slave_address=None, ignore_ack=False)
    rx = RxData('>I')


class GetCalibrationValidity(Transfer):
    """Check whether there exists a valid calibration at a specific index or not."""

    CMD_ID = 0x40

    def __init__(self, index):
        self._index = index

    def pack(self):
        return self.tx_data.pack([0x10, self._index])

    tx = TxData(CMD_ID, '>BBI', device_busy_delay=0.01, slave_address=None, ignore_ack=False)
    rx = RxData('>?')


class GetCalibrationGasId(Transfer):
    """Get the gas ID of a specific calibration index."""

    CMD_ID = 0x40

    def __init__(self, index):
        self._index = index

    def pack(self):
        return self.tx_data.pack([0x12, self._index])

    tx = TxData(CMD_ID, '>BBI', device_busy_delay=0.01, slave_address=None, ignore_ack=False)
    rx = RxData('>I')


class GetCalibrationGasUnit(Transfer):
    """Get the gas unit of a specific calibration index."""

    CMD_ID = 0x40

    def __init__(self, index):
        self._index = index

    def pack(self):
        return self.tx_data.pack([0x13, self._index])

    tx = TxData(CMD_ID, '>BBI', device_busy_delay=0.01, slave_address=None, ignore_ack=False)
    rx = RxData('>bBB')


class GetCalibrationFullscale(Transfer):
    """Get the fullscale flow of a specific calibration index."""

    CMD_ID = 0x40

    def __init__(self, index):
        self._index = index

    def pack(self):
        return self.tx_data.pack([0x14, self._index])

    tx = TxData(CMD_ID, '>BBI', device_busy_delay=0.01, slave_address=None, ignore_ack=False)
    rx = RxData('>f')


class GetCurrentGasId(Transfer):
    """Get the gas ID of the currently active calibration."""

    CMD_ID = 0x44

    def pack(self):
        return self.tx_data.pack([0x12])

    tx = TxData(CMD_ID, '>BB', device_busy_delay=0.01, slave_address=None, ignore_ack=False)
    rx = RxData('>I')


class GetCurrentGasUnit(Transfer):
    """Get the gas unit of the currently active calibration."""

    CMD_ID = 0x44

    def pack(self):
        return self.tx_data.pack([0x13])

    tx = TxData(CMD_ID, '>BB', device_busy_delay=0.01, slave_address=None, ignore_ack=False)
    rx = RxData('>bBB')


class GetCurrentFullscale(Transfer):
    """Get the fullscale flow of the currently active calibration."""

    CMD_ID = 0x44

    def pack(self):
        return self.tx_data.pack([0x14])

    tx = TxData(CMD_ID, '>BB', device_busy_delay=0.01, slave_address=None, ignore_ack=False)
    rx = RxData('>f')


class SetCalibration(Transfer):
    """"""

    CMD_ID = 0x45

    def __init__(self, calibration_number):
        self._calibration_number = calibration_number

    def pack(self):
        return self.tx_data.pack([self._calibration_number])

    tx = TxData(CMD_ID, '>BI')


class GetCalibration(Transfer):
    """"""

    CMD_ID = 0x45

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>B')
    rx = RxData('>I')


class SetCalibrationVolatile(Transfer):
    """
    This command stops the controller, changes the used calibration of the flow
    controller and starts the controller. The selected calibration is not stored to
    a non volatile memory.
    """

    CMD_ID = 0x46

    def __init__(self, calibration_number):
        self._calibration_number = calibration_number

    def pack(self):
        return self.tx_data.pack([self._calibration_number])

    tx = TxData(CMD_ID, '>BI', device_busy_delay=0.02, slave_address=None, ignore_ack=False)


class SetI2cAddress(Transfer):
    """Configures the I2C address of SFC6xxx"""

    CMD_ID = 0x67

    def __init__(self, I2c_Address):
        self._I2c_Address = I2c_Address

    def pack(self):
        return self.tx_data.pack([0x5, self._I2c_Address])

    tx = TxData(CMD_ID, '>BBB', device_busy_delay=0.05, slave_address=None, ignore_ack=False)


class GetI2cAddress(Transfer):
    """Get the I2C address of SFC6xxx."""

    CMD_ID = 0x67

    def pack(self):
        return self.tx_data.pack([0x85])

    tx = TxData(CMD_ID, '>BB', device_busy_delay=0.01, slave_address=None, ignore_ack=False)
    rx = RxData('>B')


class SetSHDLCProtocol(Transfer):
    """"""

    CMD_ID = 0x71

    def __init__(self, state):
        self._state = state

    def pack(self):
        return self.tx_data.pack([0x0, self._state])

    tx = TxData(CMD_ID, '>BB?')


class GetSHDLCProtocol(Transfer):
    """"""

    CMD_ID = 0x71

    def pack(self):
        return self.tx_data.pack([0x0])

    tx = TxData(CMD_ID, '>BB')
    rx = RxData('>?')


class SetModbusRTU(Transfer):
    """"""

    CMD_ID = 0x71

    def __init__(self, state):
        self._state = state

    def pack(self):
        return self.tx_data.pack([0x5, self._state])

    tx = TxData(CMD_ID, '>BB?')


class GetModbusRTU(Transfer):
    """"""

    CMD_ID = 0x71

    def pack(self):
        return self.tx_data.pack([0x5])

    tx = TxData(CMD_ID, '>BB')
    rx = RxData('>?')


class SetModbusParityAndStopbit(Transfer):
    """Sets the Modbus Parity and Stopbit"""

    CMD_ID = 0x73

    def __init__(self, parity_and_stopbit):
        self._parity_and_stopbit = parity_and_stopbit

    def pack(self):
        return self.tx_data.pack([0x0, self._parity_and_stopbit])

    tx = TxData(CMD_ID, '>BBB', device_busy_delay=0.05, slave_address=None, ignore_ack=False)


class SetModbusBaudrate(Transfer):
    """Sets the Modbus baudrate"""

    CMD_ID = 0x73

    def __init__(self, Baudrate):
        self._Baudrate = Baudrate

    def pack(self):
        return self.tx_data.pack([0x1, self._Baudrate])

    tx = TxData(CMD_ID, '>BBI', device_busy_delay=0.05, slave_address=None, ignore_ack=False)


class SetModbusSlaveAddress(Transfer):
    """Sets the Modbus slave address"""

    CMD_ID = 0x73

    def __init__(self, slave_address):
        self._slave_address = slave_address

    def pack(self):
        return self.tx_data.pack([0x2, self._slave_address])

    tx = TxData(CMD_ID, '>BBB', device_busy_delay=0.05, slave_address=None, ignore_ack=False)


class GetModbusParityAndStopbit(Transfer):
    """Gets the Modbus Parity and Stopbit"""

    CMD_ID = 0x73

    def pack(self):
        return self.tx_data.pack([0x80])

    tx = TxData(CMD_ID, '>BB', device_busy_delay=0.01, slave_address=None, ignore_ack=False)
    rx = RxData('>B')


class GetModbusBaudrate(Transfer):
    """Gets the Modbus baudrate"""

    CMD_ID = 0x73

    def pack(self):
        return self.tx_data.pack([0x81])

    tx = TxData(CMD_ID, '>BB', device_busy_delay=0.01, slave_address=None, ignore_ack=False)
    rx = RxData('>I')


class GetModbusSlaveAddress(Transfer):
    """Gets the Modbus slave address"""

    CMD_ID = 0x73

    def pack(self):
        return self.tx_data.pack([0x82])

    tx = TxData(CMD_ID, '>BB', device_busy_delay=0.01, slave_address=None, ignore_ack=False)
    rx = RxData('>B')


class SetSlaveAddress(Transfer):
    """This command change the device address."""

    CMD_ID = 0x90

    def __init__(self, slave_address):
        self._slave_address = slave_address

    def pack(self):
        return self.tx_data.pack([self._slave_address])

    tx = TxData(CMD_ID, '>BB')


class GetSlaveAddress(Transfer):
    """This command change the device address."""

    CMD_ID = 0x90

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>B')
    rx = RxData('>B')


class SetBaudrate(Transfer):
    """"""

    CMD_ID = 0x91

    def __init__(self, baudrate):
        self._baudrate = baudrate

    def pack(self):
        return self.tx_data.pack([self._baudrate])

    tx = TxData(CMD_ID, '>BI')


class GetBaudrate(Transfer):
    """"""

    CMD_ID = 0x91

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>B')
    rx = RxData('>I')


class GetFirmwareBuild(Transfer):
    """
    Gets the identification of the firmware build on the device. This command
    returns more detailed information than the \"Get Version\" command, which helps
    to identify non-released firmware builds.
    """

    CMD_ID = 0x9f

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>B', device_busy_delay=0.01, slave_address=None, ignore_ack=False)
    rx = RxData('>64s')


class GetProductType(Transfer):
    """Gets the product type from the device."""

    CMD_ID = 0xd0

    def pack(self):
        return self.tx_data.pack([0x0])

    tx = TxData(CMD_ID, '>BB', device_busy_delay=0.01, slave_address=None, ignore_ack=False)
    rx = RxData('>64s')


class GetProductName(Transfer):
    """"""

    CMD_ID = 0xd0

    def pack(self):
        return self.tx_data.pack([0x1])

    tx = TxData(CMD_ID, '>BB')
    rx = RxData('>64s')


class GetArticleCode(Transfer):
    """"""

    CMD_ID = 0xd0

    def pack(self):
        return self.tx_data.pack([0x2])

    tx = TxData(CMD_ID, '>BB')
    rx = RxData('>64s')


class GetSerialNumber(Transfer):
    """"""

    CMD_ID = 0xd0

    def pack(self):
        return self.tx_data.pack([0x3])

    tx = TxData(CMD_ID, '>BB')
    rx = RxData('>64s')


class GetVersion(Transfer):
    """Gets the version information for the hardware, firmware and SHDLC protocol."""

    CMD_ID = 0xd1

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>B', device_busy_delay=0.01, slave_address=None, ignore_ack=False)
    rx = RxData('>BB?BBBB')


class DeviceReset(Transfer):
    """Executes a reset on the device. This has the same effect as a power cycle."""

    CMD_ID = 0xd3

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>B', device_busy_delay=0.1, slave_address=None, ignore_ack=False)
